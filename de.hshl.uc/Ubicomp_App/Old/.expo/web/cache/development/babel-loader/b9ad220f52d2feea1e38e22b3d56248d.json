{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as SplashScreen from 'expo-splash-screen';\nimport React from 'react';\n\nvar AppLoading = function (_React$Component) {\n  _inherits(AppLoading, _React$Component);\n\n  var _super = _createSuper(AppLoading);\n\n  function AppLoading(props) {\n    var _this;\n\n    _classCallCheck(this, AppLoading);\n\n    _this = _super.call(this, props);\n    SplashScreen.preventAutoHideAsync();\n    return _this;\n  }\n\n  _createClass(AppLoading, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.autoHideSplash === false) {\n        return;\n      }\n\n      if (global.__E2E__) {\n        SplashScreen.hideAsync();\n      } else {\n        setTimeout(SplashScreen.hideAsync, 200);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return AppLoading;\n}(React.Component);\n\nAppLoading.defaultProps = {\n  autoHideSplash: true\n};\nexport { AppLoading as default };","map":{"version":3,"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,YAAZ,MAA8B,oBAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IAMqBC,U;;;;;EAKnB,oBAAYC,KAAZ,EAAwB;IAAA;;IAAA;;IACtB,0BAAMA,KAAN;IACAH,YAAY,CAACI,oBAAb;IAFsB;EAGvB;;;;WAED,gCAAoB;MAClB,IAAI,KAAKD,KAAL,CAAWE,cAAX,KAA8B,KAAlC,EAAyC;QACvC;MACD;;MAED,IAAIC,MAAM,CAACC,OAAX,EAAoB;QAElBP,YAAY,CAACQ,SAAb;MACD,CAHD,MAGO;QACLC,UAAU,CAACT,YAAY,CAACQ,SAAd,EAAyB,GAAzB,CAAV;MACD;IACF;;;WAED,kBAAM;MACJ,OAAO,IAAP;IACD;;;;EAzBqCP,KAAK,CAACS,S;;AAAzBR,U,CACZS,Y,GAAe;EACpBN,cAAc,EAAE;AADI,C;SADHH,U","names":["SplashScreen","React","AppLoading","props","preventAutoHideAsync","autoHideSplash","global","__E2E__","hideAsync","setTimeout","Component","defaultProps"],"sourceRoot":"","sources":["../src/AppLoadingNativeWrapper.tsx"],"sourcesContent":["import * as SplashScreen from 'expo-splash-screen';\nimport React from 'react';\n\ntype Props = {\n  autoHideSplash?: boolean;\n};\n\nexport default class AppLoading extends React.Component<Props> {\n  static defaultProps = {\n    autoHideSplash: true,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    SplashScreen.preventAutoHideAsync();\n  }\n\n  componentWillUnmount() {\n    if (this.props.autoHideSplash === false) {\n      return;\n    }\n    // @ts-ignore\n    if (global.__E2E__) {\n      // Hide immediately in E2E tests\n      SplashScreen.hideAsync();\n    } else {\n      setTimeout(SplashScreen.hideAsync, 200);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}